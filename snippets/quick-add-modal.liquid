<div id="product-popup" class="popup-overlay" style="display: none;">
  <div class="popup-container">
    <!-- Close button -->
    <button class="popup-close" onclick="closePopup()">×</button>

    <div class="popup-content">
      <!-- Top Section: Image and Basic Details -->
      <div class="popup-top-section">
        <!-- Product Image -->
        <div class="product-image">
          <img id="popup-product-image" src="/placeholder.svg" alt="" width="120" height="140">
        </div>

        <!-- Product Basic Details -->
        <div class="product-basic-details">
          <h2 id="popup-product-title" class="product-title"></h2>
          <p id="popup-product-price" class="product-price"></p>
          <p id="popup-product-description" class="product-description"></p>
        </div>
      </div>

      <!-- Bottom Section: Options and Cart Button -->
      <div class="popup-bottom-section">
        <!-- Color Selection -->
        <div class="option-group">
          <label class="option-label">Color</label>
          <div id="popup-color-options" class="color-options">
            <!-- Colors will be populated by JavaScript -->
          </div>
        </div>

        <!-- Size Selection -->
        <div class="option-group">
          <label class="option-label">Size</label>
          <div class="size-dropdown-container">
            <select id="popup-size-select" class="size-dropdown">
              <option value="">Choose your size</option>
              <!-- Sizes will be populated by JavaScript -->
            </select>
            <div class="dropdown-arrow-container">
              <svg class="dropdown-arrow" viewBox="0 0 14 8" fill="none">
                <path d="M1 1L7 7L13 1" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </div>
          </div>
        </div>

        <!-- Add to Cart Button -->
        <button class="add-to-cart-btn" onclick="addToCart()">
          ADD TO CART
          <svg class="arrow-icon" width="22" height="12" viewBox="0 0 24 12" fill="none">
            <line x1="5" y1="6" x2="19" y2="6"></line>
            <polyline points="12,1 19,6 12,11"></polyline>
          </svg>
        </button>
      </div>
    </div>
  </div>
</div>

<style>
  :root {
    --popup-width: 311px;
    --popup-height: 447px;
  }

  body {
    font-family: 'Jost', sans-serif;
    margin: 0;
    padding: 0;
    background: #f2f2f2;
  }

  /* overlay */
  .popup-overlay {
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.5);
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 20px;
    overflow: auto;
  }

  /* container fixed size - consistent across all devices */
  .popup-container {
    position: relative;
    width: var(--popup-width);
    height: var(--popup-height);
    background: #fff;
    display: flex;
    flex-direction: column;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    animation: popupFadeIn 0.25s ease-out;
    border-radius: 4px;
    overflow: hidden;
    min-width: var(--popup-width);
    min-height: var(--popup-height);
  }

  @keyframes popupFadeIn {
    from {
      opacity: 0;
      transform: scale(0.97);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  .popup-close {
    position: absolute;
    top: 10px;
    right: 10px;
    width: 26px;
    height: 26px;
    background: none;
    border: none;
    cursor: pointer;
    font-size: 18px;
    color: #000;
    z-index: 10;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 300;
    transition: transform 0.2s ease;
  }
  .popup-close:hover {
    transform: rotate(90deg);
  }

  /* Main content container - now column layout */
  .popup-content {
    display: flex;
    flex-direction: column;
    height: 100%;
    padding: 18px 16px 12px;
    gap: 12px;
    box-sizing: border-box;
  }

  /* Top section: image + basic details side by side */
  .popup-top-section {
    display: flex;
    flex-direction: row;
    margin-top: 15px;
    gap: 12px;
    flex-shrink: 0;
  }

  /* Left: image block */
  .product-image {
    width: 120px;
    min-width: 120px;
    height: 140px;
    border-radius: 2px;
    overflow: hidden;
    flex-shrink: 0;
    background: #f6f6f6;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .product-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  /* Right: basic details */
  .product-basic-details {
    display: flex;
    flex-direction: column;
    gap: 6px;
    flex: 1;
    min-width: 0;
  }

  /* Bottom section: options and button - full width below image */
  .popup-bottom-section {
    display: flex;
    flex-direction: column;
    gap: 8px;
    flex: 1;
    min-height: 0;
  }

  .product-title {
    font-size: 15px;
    font-weight: 400;
    margin: 0 0 4px 0;
    line-height: 1.15;
    letter-spacing: 0;
    color: #000;
    margin-top: 25px;
  }

  .product-price {
    font-size: 16px;
    font-weight: 500;
    margin: 0 0 6px 0;
    line-height: 1.15;
  }

  .product-description {
    font-size: 12px;
    margin: 0;
    line-height: 1.3;
    color: #222;
    font-weight: 400;
    white-space: normal;
    padding-bottom: 6px;
    letter-spacing: -1;
  }

  .option-group {
    margin-bottom: 8px;
  }

  .option-label {
    display: block;
    font-size: 13px;
    margin-bottom: 8px;
    color: #333;
    font-weight: 500;
  }

  /* Color options */
  .color-options {
    display: flex;
    margin-bottom: 8px;
    position: relative;
    width: 100%;
    justify-content: flex-start;
  }

  .color-option {
    width: 50%;
    height: 42px;
    border: 1px solid #888686;
    display: flex;
    align-items: center;
    justify-content: flex-start;
    font-size: 15px;
    cursor: pointer;
    transition: color 0.3s ease;
    position: relative;
    z-index: 1;
    overflow: hidden;
    color: #666;
    background: transparent;
    font-weight: normal;
    padding-left: 10px;
  }

  .color-option:first-child {
    border-right: none;
  }

  .color-option::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    width: 5px;
    z-index: 2;
  }

  .color-option:nth-child(1)::before {
    background-color: #000;
  }
  .color-option:nth-child(2)::before {
    background-color: #ffffffc4;
  }

  .color-options::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 50%;
    height: 100%;
    background: #000;
    z-index: 0;
    transition: transform 0.3s ease;
  }

  .color-options.second-selected::after {
    transform: translateX(100%);
  }

  .color-options:not(.second-selected) .color-option:first-child,
  .color-options.second-selected .color-option:last-child {
    color: #fff;
    font-weight: 500;
  }

  /* Size dropdown */
  .size-dropdown-container {
    position: relative;
    margin-bottom: 8px;
    cursor: pointer;
    width: 100%;
  }

  .size-dropdown {
    width: 100%;
    height: 42px;
    border: 1px solid #000;
    padding: 0 15px;
    background: #fff;
    cursor: pointer;
    font-size: 15px;
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    color: #333;
    font-weight: 400;
    outline: none;
    border-radius: 0;
    padding-right: 40px;
    text-align: left;
  }

  .dropdown-arrow-container {
    position: absolute;
    right: 0;
    top: 0;
    height: 100%;
    width: 42px;
    display: flex;
    align-items: center;
    justify-content: center;
    pointer-events: none;
    border: 1px solid #111010;
    background-color: #f9f9f9;
  }

  .dropdown-arrow {
    width: 14px;
    height: 8px;
    pointer-events: none;
    transform: rotate(0deg);
    transition: transform 0.3s ease;
  }

  .dropdown-arrow.rotated {
    transform: rotate(180deg);
  }

  /* Add to cart button */
  .add-to-cart-btn {
    font-family: 'Jost';
    width: 100%;
    height: 45px;
    background: #000;
    color: #fff;
    border: none;
    font-weight: 300;
    font-size: 14px;
    letter-spacing: 0;
    text-transform: uppercase;
    cursor: pointer;
    display: flex;
    align-items: center;
    line-height: 20.48px;
    justify-content: center;
    transition: all 0.3s ease;
    gap: 10px;
    padding: 0 20px;
    margin-top: auto; /* Push to bottom */
  }

  .add-to-cart-btn:hover {
    background: #222;
    transform: translateY(-2px);
  }
  .add-to-cart-btn:active {
    transform: translateY(0);
  }

  .add-to-cart-btn .arrow-icon {
    width: 22px;
    height: 12px;
    transition: transform 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);
  }

  .add-to-cart-btn:hover .arrow-icon {
    transform: translateX(6px);
  }

  /* Keep popup size consistent across all devices */
  @media (max-width: 420px) {
    .popup-container {
      width: var(--popup-width);
      height: var(--popup-height);
      max-width: calc(100vw - 40px);
      max-height: calc(100vh - 40px);
    }

    .popup-content {
      padding: 18px 16px 12px;
    }

    .popup-top-section {
      flex-direction: row;
      gap: 12px;
    }

    .product-image {
      width: 120px;
      min-width: 120px;
      height: 140px;
    }
  }
</style>

<script>
  // Compact utilities
  const utils = {
    fetchConfig: (type = 'json', config = {}) => {
      const headers = { 'Content-Type': 'application/json', Accept: `application/${type}`, ...config.headers };
      if (type === 'javascript') {
        headers['X-Requested-With'] = 'XMLHttpRequest';
        delete headers['Content-Type'];
      }
      return { method: 'POST', headers, body: config.body };
    },
    
    notify: (message, type = 'info') => {
      document.querySelectorAll('.qa-notif').forEach(n => n.remove());
      const colors = { success: '#4CAF50', error: '#f44336', warning: '#ff9800', info: '#2196F3' };
      const div = document.createElement('div');
      div.className = 'qa-notif';
      div.textContent = message;
      div.style.cssText = `position:fixed;top:20px;right:20px;padding:12px 20px;border-radius:4px;color:white;font-family:Jost,sans-serif;font-size:14px;z-index:10000;background:${colors[type]};animation:slideIn 0.3s ease`;
      
      if (!document.querySelector('#qa-styles')) {
        const style = document.createElement('style');
        style.id = 'qa-styles';
        style.textContent = '@keyframes slideIn{from{transform:translateX(100%);opacity:0}to{transform:translateX(0);opacity:1}}@keyframes spin{to{transform:rotate(360deg)}}';
        document.head.appendChild(style);
      }
      
      document.body.appendChild(div);
      setTimeout(() => div.remove(), 4000);
    }
  };

  function openPopup(
    data = {
      title: 'Product Name',
      price: 'Price not available',
      image: '/placeholder.svg?height=600&width=400',
      description: 'Product details coming soon.',
      colors: ['Black', 'White'],
      sizes: ['XS', 'S', 'M', 'L', 'XL'],
      variantId: null,
      variants: [],
    }
  ) {
    window.currentProductData = data;

    if (data?.productUrl && (!data.variants || !data.variants.length)) {
      setTimeout(() => {
        const btn = document.querySelector('.add-to-cart-btn');
        if (btn) {
          btn.disabled = true;
          btn.style.opacity = '0.6';
        }
      }, 100);
      fetchProductData(data.productUrl, data);
    }

    const popup = document.getElementById('product-popup');
    if (popup) {
      popup.style.display = 'flex';
      document.body.style.overflow = 'hidden';
    }

    populatePopupData(data);
  }

  function populatePopupData(data) {
    const els = ['title', 'price', 'image', 'description', 'colorContainer:popup-color-options', 'sizeSelect:popup-size-select']
      .reduce((acc, key) => {
        const [prop, id] = key.split(':');
        acc[prop] = document.getElementById(id || `popup-product-${prop}`);
        return acc;
      }, {});

    if (els.title) els.title.textContent = data.title;
    if (els.price) els.price.textContent = data.price;
    if (els.image) Object.assign(els.image, { src: data.image, alt: data.title });
    if (els.description) els.description.textContent = data.description;

    if (els.colorContainer && data.colors) {
      els.colorContainer.innerHTML = '';
      data.colors.forEach((color, i) => {
        const btn = Object.assign(document.createElement('button'), {
          className: `color-option ${i === 0 ? 'active' : ''}`,
          textContent: color,
          onclick: () => {
            document.querySelectorAll('.color-option').forEach(opt => opt.classList.remove('active'));
            btn.classList.add('active');
            els.colorContainer.classList.toggle('second-selected', i === 1);
          }
        });
        els.colorContainer.appendChild(btn);
      });
    }

    if (els.sizeSelect && data.sizes) {
      els.sizeSelect.innerHTML = '<option value="">Choose your size</option>' + 
        data.sizes.map(size => `<option value="${size}">${size}</option>`).join('');
    }
  }

  function closePopup() {
    const popup = document.getElementById('product-popup');
    if (popup) {
      popup.style.display = 'none';
      document.body.style.overflow = 'auto';
    }
  }

  function addToCart() {
    const colorOption = document.querySelector('.color-option.active');
    const sizeSelect = document.getElementById('popup-size-select');
    const addToCartBtn = document.querySelector('.add-to-cart-btn');

    if (!colorOption) return utils.notify('Please select a color', 'error');
    if (!sizeSelect) return utils.notify('Size selection not available', 'error');
    if (!addToCartBtn) return utils.notify('Add to cart button not available', 'error');

    const selectedColor = colorOption.textContent;
    const selectedSize = sizeSelect.value;

    if (!selectedSize) return utils.notify('Please select a size', 'error');

    const productData = window.currentProductData;
    if (!productData) return utils.notify('Unable to add to cart. Please try again.', 'error');

    const isStillLoading = (!productData.variants || !productData.variants.length) && 
      productData.colors?.length === 2 && productData.colors[0] === 'Black' && productData.colors[1] === 'White';

    if (isStillLoading) return utils.notify('Please wait for product options to load...', 'warning');

    let variantId = findVariantId(productData, selectedColor, selectedSize);
    if (!variantId) return utils.notify('Unable to add to cart. Please try again.', 'error');

    // Use FormData for AJAX cart add (following theme patterns)
    const formData = new FormData();
    formData.append('id', variantId);
    formData.append('quantity', '1');

    const originalText = addToCartBtn.innerHTML;
    addToCartBtn.innerHTML = 'Adding... <div style="display:inline-block;width:12px;height:12px;border:2px solid rgba(255,255,255,0.3);border-radius:50%;border-top-color:white;animation:spin 1s linear infinite;"></div>';
    addToCartBtn.disabled = true;
    addToCartBtn.style.opacity = '0.8';

    const fetchCfg = utils.fetchConfig('javascript', { body: formData });

    fetch(Theme.routes.cart_add_url, {
      ...fetchCfg,
      headers: {
        ...fetchCfg.headers,
        Accept: 'application/json',
      },
    })
      .then((response) => {
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        return response.json();
      })
      .then((data) => {
        if (data.status) {
          // Dispatch cart error event for theme consistency
          document.dispatchEvent(
            new CustomEvent('cart:error', {
              detail: {
                sourceId: 'quick-add-modal',
                message: data.message || 'Unknown error',
                description: data.description || '',
                errors: data.errors || {},
              },
              bubbles: true,
            })
          );
          utils.notify('Error adding to cart: ' + (data.message || 'Unknown error'), 'error');
        } else {
          // Update cart count and trigger cart refresh
          updateCartAfterAdd(data, productData, variantId);
          utils.notify('Added to cart!', 'success');
          closePopup();
          
          // Check if gift should be added (Black + Medium combination)
          // Add delay before redirect to allow gift to be processed
          const shouldAddGift = selectedColor?.toLowerCase() === 'black' && 
                               (selectedSize?.toLowerCase() === 'medium' || 
                                selectedSize?.toLowerCase() === 'm' ||
                                selectedSize?.toLowerCase() === 'med');
          
          if (shouldAddGift) {
            checkAndAddGift(selectedColor, selectedSize).then(() => {
              // Redirect after gift is processed
              setTimeout(() => {
                window.location.href = Theme.routes.cart_url;
              }, 1000); // 1 second delay to see gift notification
            }).catch(() => {
              // Redirect even if gift fails
              setTimeout(() => {
                window.location.href = Theme.routes.cart_url;
              }, 500);
            });
          } else {
            // No gift needed, redirect immediately
            window.location.href = Theme.routes.cart_url;
          }
        }
      })
      .catch((error) => {
        const statusErrors = {
          422: 'This item cannot be added to cart. It may be out of stock or unavailable.',
          400: 'Invalid request. Please try again.',
          500: 'Server error. Please try again later.',
        };
        const statusCode = error.message.match(/status: (\d{3})/)?.[1];
        const errorMessage = statusErrors[statusCode] || 'Error adding to cart. Please try again.';
        
        // Dispatch cart error event
        document.dispatchEvent(
          new CustomEvent('cart:error', {
            detail: {
              sourceId: 'quick-add-modal',
              message: errorMessage,
              description: error.message || '',
              errors: {},
            },
            bubbles: true,
          })
        );
        
        utils.notify(errorMessage, 'error');
      })
      .finally(() => {
        addToCartBtn.innerHTML = originalText;
        addToCartBtn.disabled = false;
        addToCartBtn.style.opacity = '1';
      });
  }

  // Compact cart update function
  function updateCartAfterAdd(cartData, productData, variantId) {
    const events = [
      ['cart:update', { resource: cartData, sourceId: 'quick-add-modal', data: { didError: false, source: 'quick-add-modal', itemCount: cartData.item_count || 1, productId: productData.productId || productData.id, variantId } }],
      ['cart:added', { product: cartData, variant: cartData, quantity: 1, source: 'quick-add-modal' }],
      ['cartChanged', { cart: cartData }]
    ];
    
    events.forEach(([name, detail]) => document.dispatchEvent(new CustomEvent(name, { detail, bubbles: true })));
    
    // Update cart UI elements
    const cartIcon = document.querySelector('cart-icon');
    const cartDrawer = document.querySelector('cart-drawer');
    if (cartIcon?.updateIcon) cartIcon.updateIcon();
    if (cartDrawer?.refresh) cartDrawer.refresh();
    
    document.querySelectorAll('[data-cart-count], .cart-count, #cart-count').forEach(el => {
      if (cartData.item_count !== undefined) {
        el.textContent = cartData.item_count;
        el.setAttribute('data-count', cartData.item_count);
      }
    });
  }

  function findVariantId(productData, selectedColor, selectedSize) {
    if (!productData.variants?.length) return productData.variantId;

    const commonColors = [
      'black',
      'white',
      'red',
      'blue',
      'green',
      'yellow',
      'pink',
      'gray',
      'grey',
      'brown',
      'purple',
      'orange',
    ];
    const commonSizes = ['xs', 's', 'm', 'l', 'xl', 'xxl', 'small', 'medium', 'large', 'extra small', 'extra large'];

    const sample = productData.variants[0];
    let colorKey = null,
      sizeKey = null;

    ['option1', 'option2', 'option3'].forEach((key) => {
      if (sample[key]) {
        const val = sample[key].toLowerCase();
        if (commonColors.includes(val) && !colorKey) colorKey = key;
        else if (commonSizes.includes(val) && !sizeKey) sizeKey = key;
      }
    });

    if (!colorKey && !sizeKey) {
      colorKey = 'option1';
      sizeKey = 'option2';
    } else if (!colorKey) colorKey = sizeKey === 'option1' ? 'option2' : 'option1';
    else if (!sizeKey) sizeKey = colorKey === 'option1' ? 'option2' : 'option1';

    let variant = productData.variants.find((v) => {
      const colorMatch = !selectedColor || (colorKey && v[colorKey]?.toLowerCase() === selectedColor.toLowerCase());
      const sizeMatch = !selectedSize || (sizeKey && v[sizeKey]?.toLowerCase() === selectedSize.toLowerCase());
      return colorMatch && sizeMatch && v.available !== false;
    });

    if (!variant) {
      variant = productData.variants.find((v) => v.available !== false);
    }

    return variant?.id;
  }

  function findGiftVariantId(giftProduct, targetSize) {
    if (!giftProduct.variants?.length) return null;

    const commonSizes = ['xs', 's', 'm', 'l', 'xl', 'xxl', 'small', 'medium', 'large', 'extra small', 'extra large'];
    
    const sample = giftProduct.variants[0];
    let sizeKey = null;

    // Find which option contains the size
    ['option1', 'option2', 'option3'].forEach((key) => {
      if (sample[key]) {
        const val = sample[key].toLowerCase();
        if (commonSizes.includes(val) && !sizeKey) sizeKey = key;
      }
    });

    // If no size option detected, try option1 and option2 as fallbacks
    if (!sizeKey) {
      sizeKey = 'option1'; // Try option1 first
    }

    // Look for variant that matches the target size (Medium)
    let variant = giftProduct.variants.find((v) => {
      if (!sizeKey || !v[sizeKey]) return false;
      const variantSize = v[sizeKey].toLowerCase();
      const targetSizeLower = targetSize.toLowerCase();
      
      // Match Medium, M, or Med
      return (variantSize === targetSizeLower || 
              variantSize === 'm' || 
              variantSize === 'med') && 
              v.available !== false;
    });

    // If not found with option1, try option2
    if (!variant && sizeKey === 'option1') {
      sizeKey = 'option2';
      variant = giftProduct.variants.find((v) => {
        if (!sizeKey || !v[sizeKey]) return false;
        const variantSize = v[sizeKey].toLowerCase();
        const targetSizeLower = targetSize.toLowerCase();
        
        return (variantSize === targetSizeLower || 
                variantSize === 'm' || 
                variantSize === 'med') && 
                v.available !== false;
      });
    }

    return variant;
  }

  function testCart() {
    fetch(Theme.routes.cart_url + '.js')
      .then((response) => response.json())
      .then((data) => alert('Cart contains ' + data.item_count + ' items'))
      .catch(() => alert('Error accessing cart'));
  }

  // Function to check if gift should be added and add it
  async function checkAndAddGift(selectedColor, selectedSize) {
    
    // Check multiple size variations (M, Medium, m, medium)
    const isBlack = selectedColor?.toLowerCase() === 'black';
    const isMedium = selectedSize?.toLowerCase() === 'medium' || 
                     selectedSize?.toLowerCase() === 'm' ||
                     selectedSize?.toLowerCase() === 'med';
    
    if (isBlack && isMedium) {
      utils.notify('Adding gift item...', 'info');
      
      try {
        // Try to find and add the "Blue Silk Tuxedo" as a gift
        await addBlueSilkTuxedoGift();
      } catch (error) {
        utils.notify('Could not add gift item', 'warning');
      }
    }
  }

  // Function to add Blue Silk Tuxedo as gift
  async function addBlueSilkTuxedoGift() {
    // Try multiple possible product handles for Blue Silk Tuxedo
    const possibleHandles = [
      'blue-silk-tuxedo',
      'silk-tuxedo',
      'blue-tuxedo',
      'tuxedo',
      'formal-wear',
      'silk-suit',
      'blue-suit',
      'gift-tuxedo',
      'free-tuxedo'
    ];
    
    let giftProduct = null;
    let workingHandle = null;
    
    // Try each handle until we find a working product
    for (const handle of possibleHandles) {
      try {
        const giftProductUrl = `/products/${handle}`;
        
        const response = await fetch(giftProductUrl + '.js');
        
        if (response.ok) {
          giftProduct = await response.json();
          workingHandle = handle;
          break;
        }
      } catch (error) {
        // Handle error silently
      }
    }
    
    // If no specific gift product found, try to get any product from the store as fallback
    if (!giftProduct) {
      try {
        // Try to get first product from collections endpoint
        const collectionsResponse = await fetch('/collections/all/products.json?limit=1');
        if (collectionsResponse.ok) {
          const collectionsData = await collectionsResponse.json();
          if (collectionsData.products && collectionsData.products.length > 0) {
            giftProduct = collectionsData.products[0];
            utils.notify(`🎁 Adding ${giftProduct.title} as gift (fallback)`, 'info');
          }
        }
      } catch (error) {
        // Handle error silently
      }
    }
    
    if (!giftProduct) {
      utils.notify('Blue Silk Tuxedo not found in store', 'warning');
      return;
    }
    
    // Find the Medium-sized variant using the same logic as the main product
    let giftVariant = null;
    if (giftProduct.variants?.length) {
      // Use the same findVariantId logic to find Medium size variant
      giftVariant = findGiftVariantId(giftProduct, 'Medium');
    }
    
    // Fallback to first available variant if Medium not found
    if (!giftVariant) {
      giftVariant = giftProduct.variants?.find(v => v.available) || giftProduct.variants?.[0];
    }
    
    if (!giftVariant) {
      utils.notify('Gift product has no available variants', 'warning');
      return;
    }
    
    // Add the gift to cart with line item properties to mark it as free
    const formData = new FormData();
    formData.append('id', giftVariant.id);
    formData.append('quantity', '1');
    
    // Add line item properties to mark this as a free gift
    formData.append('properties[_gift]', 'true');
    formData.append('properties[_gift_reason]', 'Free Medium-sized gift with Black + Medium purchase');
    formData.append('properties[_original_price]', giftVariant.price);
    formData.append('properties[_gift_price]', '0');
    
    const fetchCfg = utils.fetchConfig('javascript', { body: formData });
    
    try {
      const addGiftResponse = await fetch(Theme.routes.cart_add_url, {
        ...fetchCfg,
        headers: {
          ...fetchCfg.headers,
          Accept: 'application/json',
        },
      });
      
      if (addGiftResponse.ok) {
        const giftData = await addGiftResponse.json();
        
        if (!giftData.status) {
          // Successfully added gift
          const sizeInfo = giftVariant && giftVariant.option1 && giftVariant.option1.toLowerCase().includes('med') ? ' (Medium)' : 
                           giftVariant && giftVariant.option2 && giftVariant.option2.toLowerCase().includes('med') ? ' (Medium)' : '';
          utils.notify(`🎁 Free Blue Silk Tuxedo${sizeInfo} (${giftProduct.title}) added to your cart!`, 'success');
          
          // Store gift info for cart processing
          sessionStorage.setItem('recent_gift_item', JSON.stringify({
            variantId: giftVariant.id,
            productTitle: giftProduct.title,
            addedAt: Date.now()
          }));
          
          // Dispatch events for cart update
          document.dispatchEvent(new CustomEvent('cart:added', { 
            detail: { product: giftData, variant: giftData, quantity: 1, source: 'gift-add' },
            bubbles: true 
          }));
          
          // Apply gift discount after cart updates
          setTimeout(() => {
            applyGiftDiscount(giftVariant.id);
          }, 500);
        } else {
          utils.notify('Failed to add gift: ' + (giftData.message || 'Unknown error'), 'error');
        }
      } else {
        utils.notify('Failed to add gift to cart', 'error');
      }
    } catch (error) {
      utils.notify('Error adding gift: ' + error.message, 'error');
    }
  }

  window.testCart = testCart;
  
  // Debug function to test gift functionality
  window.testGift = function() {
    checkAndAddGift('Black', 'Medium');
  };
  
  // Debug function to try different product handles
  window.testGiftHandles = async function() {
    const commonHandles = [
      'soft-winter-jacket',
      'winter-jacket',
      'jacket',
      'gift-item',
      'free-gift'
    ];
    
    for (const handle of commonHandles) {
      try {
        const response = await fetch(`/products/${handle}.js`);
        if (response.ok) {
          const product = await response.json();
          return handle;
        }
      } catch (error) {
        // Handle error silently
      }
    }
  };

  document.addEventListener('DOMContentLoaded', () => {
    const popup = document.getElementById('product-popup');
    if (popup) {
      popup.addEventListener('click', (e) => {
        if (e.target === popup) closePopup();
      });
    }

    const sizeSelect = document.getElementById('popup-size-select');
    const arrow = document.querySelector('.dropdown-arrow');

    if (sizeSelect && arrow) {
      sizeSelect.addEventListener('focus', () => arrow.classList.add('rotated'));
      sizeSelect.addEventListener('blur', () => arrow.classList.remove('rotated'));
      sizeSelect.addEventListener('mousedown', () => arrow.classList.add('rotated'));
      sizeSelect.addEventListener('change', () => setTimeout(() => arrow.classList.remove('rotated'), 100));
    }
  });

  document.addEventListener('click', (e) => {
    const button = e.target.closest('button, a');
    if (!button || (!button.textContent.includes('+') && !button.classList.contains('quick-add'))) return;

    const container = button.closest('.product-item, .product-card, .grid-product, .product, [data-product]');
    if (!container) return;

    const title = container.querySelector('.product-title, .product-name, h3, h2')?.textContent?.trim();
    const price = container.querySelector('.price, .product-price, .money')?.textContent?.trim();
    const image = container.querySelector('img')?.src;
    // Only look for specific description classes, avoid elements that might contain titles
    const description = container
      .querySelector('.product-excerpt, .product-summary, .card-description, .excerpt')
      ?.textContent?.trim();

    const productId =
      container.dataset.productId ||
      container.querySelector('[data-product-id]')?.dataset.productId ||
      container.id?.replace('product-card-', '');

    let variantId = null;
    let variants = [];

    const variantPicker = container.querySelector('variant-picker');
    if (variantPicker) {
      const selected = variantPicker.querySelector('input[type="radio"]:checked');
      if (selected) variantId = selected.dataset.variantId;

      variants = Array.from(variantPicker.querySelectorAll('input[data-variant-id]')).map((input) => ({
        id: input.dataset.variantId,
        option1: input.dataset.option1 || input.value,
        option2: input.dataset.option2 || '',
        option3: input.dataset.option3 || '',
        available: input.dataset.optionAvailable !== 'false' && !input.disabled,
      }));
    }

    const form = container.querySelector('form[data-type="add-to-cart-form"]');
    if (form && !variantId) {
      const input = form.querySelector('input[name="id"]');
      if (input) variantId = input.value;
    }

    const script = container.querySelector('script[type="application/json"]');
    if (script && !variantId) {
      try {
        const data = JSON.parse(script.textContent);
        if (data?.id) variantId = data.id;
      } catch (e) {
        // Handle error silently
      }
    }

    const productLink = container.querySelector('a[href*="/products/"]');
    const productUrl = productLink?.href;

    if (title || price) {
      const productData = {
        id: productId,
        title: title || 'Product Name',
        price: price || 'Price not available',
        image: image || '/placeholder.svg?height=600&width=400',
        description: description || 'Loading product details...',
        colors: ['Black', 'White'],
        sizes: ['XS', 'S', 'M', 'L', 'XL'],
        variantId,
        variants,
        productUrl,
      };

      // Always fetch product data if we have a URL to get accurate description and variants
      if (productUrl) fetchProductData(productUrl, productData);

      e.preventDefault();
      openPopup(productData);
    }
  });

  async function fetchProductData(productUrl, baseProductData) {
    try {
      const response = await fetch(productUrl.split('?')[0] + '.js');
      const productJson = await response.json();

      if (productJson && window.currentProductData?.id == baseProductData.id) {
        // Update variants if available
        if (productJson.variants) {
          window.currentProductData.variants = productJson.variants;
          updatePopupWithVariants(productJson.variants);
        }

        // Update description if available and not already set properly
        if (
          productJson.description &&
          (!window.currentProductData.description ||
            window.currentProductData.description === 'Loading product details...' ||
            window.currentProductData.description === 'Product details coming soon.')
        ) {
          // Strip HTML tags and limit length for popup display
          const cleanDescription = productJson.description
            .replace(/<[^>]*>/g, ' ')
            .replace(/\s+/g, ' ')
            .trim();
          const truncatedDescription =
            cleanDescription.length > 120 ? cleanDescription.substring(0, 120) + '...' : cleanDescription;

          window.currentProductData.description = truncatedDescription;
          const descriptionElement = document.getElementById('popup-product-description');
          if (descriptionElement) {
            descriptionElement.textContent = truncatedDescription;
          }
        }
      }
    } catch (error) {
      // Handle error silently
    }
  }

  function updatePopupWithVariants(variants) {
    if (!variants?.length) return;

    const commonColors = [
      'black',
      'white',
      'red',
      'blue',
      'green',
      'yellow',
      'pink',
      'gray',
      'grey',
      'brown',
      'purple',
      'orange',
    ];
    const commonSizes = ['xs', 's', 'm', 'l', 'xl', 'xxl', 'small', 'medium', 'large', 'extra small', 'extra large'];

    const sample = variants[0];
    let colorKey = null,
      sizeKey = null;

    ['option1', 'option2', 'option3'].forEach((key) => {
      if (sample[key]) {
        const val = sample[key].toLowerCase();
        if (commonColors.includes(val) && !colorKey) colorKey = key;
        else if (commonSizes.includes(val) && !sizeKey) sizeKey = key;
      }
    });

    if (!colorKey && !sizeKey) {
      colorKey = 'option1';
      sizeKey = 'option2';
    } else if (!colorKey) colorKey = sizeKey === 'option1' ? 'option2' : 'option1';
    else if (!sizeKey) sizeKey = colorKey === 'option1' ? 'option2' : 'option1';

    const colorValues = [...new Set(variants.map((v) => v[colorKey]).filter(Boolean))];
    const sizeValues = [...new Set(variants.map((v) => v[sizeKey]).filter(Boolean))];

    if (window.currentProductData) {
      window.currentProductData.colors = colorValues;
      window.currentProductData.sizes = sizeValues;
    }

    const addToCartBtn = document.querySelector('.add-to-cart-btn');
    if (addToCartBtn) {
      addToCartBtn.disabled = false;
      addToCartBtn.style.opacity = '1';
    }

    if (colorValues.length) {
      const colorContainer = document.getElementById('popup-color-options');
      if (colorContainer) {
        colorContainer.innerHTML = '';
        colorValues.forEach((color, i) => {
          const btn = document.createElement('button');
          btn.className = `color-option ${i === 0 ? 'active' : ''}`;
          btn.textContent = color;
          btn.onclick = () => {
            document.querySelectorAll('.color-option').forEach((opt) => opt.classList.remove('active'));
            btn.classList.add('active');
            colorContainer.classList.toggle('second-selected', i === 1);
          };
          colorContainer.appendChild(btn);
        });
      }
    }

    if (sizeValues.length) {
      const sizeSelect = document.getElementById('popup-size-select');
      if (sizeSelect) {
        sizeSelect.innerHTML = '<option value="">Choose your size</option>';
        sizeValues.forEach((size) => {
          const opt = document.createElement('option');
          opt.value = opt.textContent = size;
          sizeSelect.appendChild(opt);
        });
      }
    }
  }
</script>
