<div id="product-popup" class="popup-overlay" style="display: none;">
  <div class="popup-container">
    <!-- Close button -->
    <button class="popup-close" onclick="closePopup()">Ã—</button>

    <div class="popup-content">
      <!-- Top Section: Image and Basic Details -->
      <div class="popup-top-section">
        <!-- Product Image -->
        <div class="product-image">
          <img id="popup-product-image" src="/placeholder.svg" alt="" width="120" height="140">
        </div>

        <!-- Product Basic Details -->
        <div class="product-basic-details">
          <h2 id="popup-product-title" class="product-title"></h2>
          <p id="popup-product-price" class="product-price"></p>
          <p id="popup-product-description" class="product-description"></p>
        </div>
      </div>

      <!-- Bottom Section: Options and Cart Button -->
      <div class="popup-bottom-section">
        <!-- Color Selection -->
        <div class="option-group">
          <label class="option-label">Color</label>
          <div id="popup-color-options" class="color-options">
            <!-- Colors will be populated by JavaScript -->
          </div>
        </div>

        <!-- Size Selection -->
        <div class="option-group">
          <label class="option-label">Size</label>
          <div class="size-dropdown-container">
            <select id="popup-size-select" class="size-dropdown">
              <option value="">Choose your size</option>
              <!-- Sizes will be populated by JavaScript -->
            </select>
            <div class="dropdown-arrow-container">
              <svg class="dropdown-arrow" viewBox="0 0 14 8" fill="none">
                <path d="M1 1L7 7L13 1" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </div>
          </div>
        </div>

        <!-- Add to Cart Button -->
        <button class="add-to-cart-btn" onclick="addToCart()">
          ADD TO CART
          <svg class="arrow-icon" width="22" height="12" viewBox="0 0 24 12" fill="none">
            <line x1="5" y1="6" x2="19" y2="6"></line>
            <polyline points="12,1 19,6 12,11"></polyline>
          </svg>
        </button>
      </div>
    </div>
  </div>
</div>



<style>
  :root {
    --popup-width: 311px;
    --popup-height: 447px;
  }

  body {
    font-family: 'Jost', sans-serif;
    margin: 0;
    padding: 0;
    background: #f2f2f2;
  }

  /* overlay */
  .popup-overlay {
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.5);
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 20px;
    overflow: auto;
  }

  /* container fixed size - consistent across all devices */
  .popup-container {
    position: relative;
    width: var(--popup-width);
    height: var(--popup-height);
    background: #fff;
    display: flex;
    flex-direction: column;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    animation: popupFadeIn 0.25s ease-out;
    border-radius: 4px;
    overflow: hidden;
    min-width: var(--popup-width);
    min-height: var(--popup-height);
  }

  @keyframes popupFadeIn {
    from {
      opacity: 0;
      transform: scale(0.97);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  .popup-close {
    position: absolute;
    top: 10px;
    right: 10px;
    width: 26px;
    height: 26px;
    background: none;
    border: none;
    cursor: pointer;
    font-size: 18px;
    color: #000;
    z-index: 10;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 300;
    transition: transform 0.2s ease;
  }
  .popup-close:hover {
    transform: rotate(90deg);
  }

  /* Main content container - now column layout */
  .popup-content {
    display: flex;
    flex-direction: column;
    height: 100%;
    padding: 18px 16px 12px;
    gap: 12px;
    box-sizing: border-box;
  }

  /* Top section: image + basic details side by side */
  .popup-top-section {
    display: flex;
    flex-direction: row;
    margin-top: 15px;
    gap: 12px;
    flex-shrink: 0;
  }

  /* Left: image block */
  .product-image {
    width: 120px;
    min-width: 120px;
    height: 140px;
    border-radius: 2px;
    overflow: hidden;
    flex-shrink: 0;
    background: #f6f6f6;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .product-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  /* Right: basic details */
  .product-basic-details {
    display: flex;
    flex-direction: column;
    gap: 6px;
    flex: 1;
    min-width: 0;
  }

  /* Bottom section: options and button - full width below image */
  .popup-bottom-section {
    display: flex;
    flex-direction: column;
    gap: 8px;
    flex: 1;
    min-height: 0;
  }

  .product-title {
    font-size: 15px;
    font-weight: 400;
    margin: 0 0 4px 0;
    line-height: 1.15;
    letter-spacing: 0;
    color: #000;
    margin-top: 25px;
  }

  .product-price {
    font-size: 16px;
    font-weight: 500;
    margin: 0 0 6px 0;
    line-height: 1.15;
  }

  .product-description {
    font-size: 12px;
    margin: 0;
    line-height: 1.3;
    color: #222;
    font-weight: 400;
    white-space: normal;
    padding-bottom: 6px;
    letter-spacing: -1;
  }

  .option-group {
    margin-bottom: 8px;
  }

  .option-label {
    display: block;
    font-size: 13px;
    margin-bottom: 8px;
    color: #333;
    font-weight: 500;
  }

  /* Color options */
  .color-options {
    display: flex;
    margin-bottom: 8px;
    position: relative;
    width: 100%;
    justify-content: flex-start;
  }

  .color-option {
    width: 50%;
    height: 42px;
    border: 1px solid #888686;
    display: flex;
    align-items: center;
    justify-content: flex-start;
    font-size: 15px;
    cursor: pointer;
    transition: color 0.3s ease;
    position: relative;
    z-index: 1;
    overflow: hidden;
    color: #666;
    background: transparent;
    font-weight: normal;
    padding-left: 10px;
  }

  .color-option:first-child {
    border-right: none;
  }

  .color-option::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    width: 5px;
    z-index: 2;
  }

  .color-option:nth-child(1)::before {
    background-color: #000;
  }
  .color-option:nth-child(2)::before {
    background-color: #ffffffc4;
  }

  .color-options::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 50%;
    height: 100%;
    background: #000;
    z-index: 0;
    transition: transform 0.3s ease;
  }

  .color-options.second-selected::after {
    transform: translateX(100%);
  }

  .color-options:not(.second-selected) .color-option:first-child,
  .color-options.second-selected .color-option:last-child {
    color: #fff;
    font-weight: 500;
  }

  /* Size dropdown */
  .size-dropdown-container {
    position: relative;
    margin-bottom: 8px;
    cursor: pointer;
    width: 100%;
  }

  .size-dropdown {
    width: 100%;
    height: 42px;
    border: 1px solid #000;
    padding: 0 15px;
    background: #fff;
    cursor: pointer;
    font-size: 15px;
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    color: #333;
    font-weight: 400;
    outline: none;
    border-radius: 0;
    padding-right: 40px;
    text-align: left;
  }

  .dropdown-arrow-container {
    position: absolute;
    right: 0;
    top: 0;
    height: 100%;
    width: 42px;
    display: flex;
    align-items: center;
    justify-content: center;
    pointer-events: none;
    border: 1px solid #111010;
    background-color: #f9f9f9;
  }

  .dropdown-arrow {
    width: 14px;
    height: 8px;
    pointer-events: none;
    transform: rotate(0deg);
    transition: transform 0.3s ease;
  }

  .dropdown-arrow.rotated {
    transform: rotate(180deg);
  }

  /* Add to cart button */
  .add-to-cart-btn {
    font-family: 'Jost';
    width: 100%;
    height: 45px;
    background: #000;
    color: #fff;
    border: none;
    font-weight: 300;
    font-size: 14px;
    letter-spacing: 0;
    text-transform: uppercase;
    cursor: pointer;
    display: flex;
    align-items: center;
    line-height: 20.48px;
    justify-content: center;
    transition: all 0.3s ease;
    gap: 10px;
    padding: 0 20px;
    margin-top: auto; /* Push to bottom */
  }

  .add-to-cart-btn:hover {
    background: #222;
    transform: translateY(-2px);
  }
  .add-to-cart-btn:active {
    transform: translateY(0);
  }

  .add-to-cart-btn .arrow-icon {
    width: 22px;
    height: 12px;
    transition: transform 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);
  }

  .add-to-cart-btn:hover .arrow-icon {
    transform: translateX(6px);
  }

  /* Keep popup size consistent across all devices */
  @media (max-width: 420px) {
    .popup-container {
      width: var(--popup-width);
      height: var(--popup-height);
      max-width: calc(100vw - 40px);
      max-height: calc(100vh - 40px);
    }

    .popup-content {
      padding: 18px 16px 12px;
    }

    .popup-top-section {
      flex-direction: row;
      gap: 12px;
    }

    .product-image {
      width: 120px;
      min-width: 120px;
      height: 140px;
    }
  }
</style>

<script>
function openPopup(data = {
  title: 'Demo Product',
  price: '$99.99',
  image: '/placeholder.svg?height=600&width=400',
  description: 'This is a demo product for testing the quick-add functionality.',
  colors: ['Black', 'White', 'Red'],
  sizes: ['S', 'M', 'L', 'XL'],
  variantId: '123456789',
  variants: [
    { id: '123456789', option1: 'Black', option2: 'S', available: true },
    { id: '123456790', option1: 'Black', option2: 'M', available: true },
    { id: '123456791', option1: 'White', option2: 'S', available: true },
    { id: '123456792', option1: 'White', option2: 'M', available: true },
  ],
}) {
  window.currentProductData = data;

  if (data?.productUrl && (!data.variants || !data.variants.length)) {
    setTimeout(() => {
      const btn = document.querySelector('.add-to-cart-btn');
      if (btn) { btn.disabled = true; btn.style.opacity = '0.6'; }
    }, 100);
    fetchProductData(data.productUrl, data);
  }

  const popup = document.getElementById('product-popup');
  if (popup) {
    popup.style.display = 'flex';
    document.body.style.overflow = 'hidden';
  }

  populatePopupData(data);
}

function populatePopupData(data) {
  const elements = {
    title: document.getElementById('popup-product-title'),
    price: document.getElementById('popup-product-price'),
    image: document.getElementById('popup-product-image'),
    description: document.getElementById('popup-product-description'),
    colorContainer: document.getElementById('popup-color-options'),
    sizeSelect: document.getElementById('popup-size-select')
  };

  if (elements.title) elements.title.textContent = data.title;
  if (elements.price) elements.price.textContent = data.price;
  if (elements.image) { elements.image.src = data.image; elements.image.alt = data.title; }
  if (elements.description) elements.description.textContent = data.description;

  if (elements.colorContainer && data.colors) {
    elements.colorContainer.innerHTML = '';
    data.colors.forEach((color, i) => {
      const btn = document.createElement('button');
      btn.className = `color-option ${i === 0 ? 'active' : ''}`;
      btn.textContent = color;
      btn.onclick = () => {
        document.querySelectorAll('.color-option').forEach(opt => opt.classList.remove('active'));
        btn.classList.add('active');
        elements.colorContainer.classList.toggle('second-selected', i === 1);
      };
      elements.colorContainer.appendChild(btn);
    });
  }

  if (elements.sizeSelect && data.sizes) {
    elements.sizeSelect.innerHTML = '<option value="">Choose your size</option>';
    data.sizes.forEach(size => {
      const opt = document.createElement('option');
      opt.value = opt.textContent = size;
      elements.sizeSelect.appendChild(opt);
    });
  }
}

function closePopup() {
  const popup = document.getElementById('product-popup');
  if (popup) {
    popup.style.display = 'none';
    document.body.style.overflow = 'auto';
  }
}

function addToCart() {
  const colorOption = document.querySelector('.color-option.active');
  const sizeSelect = document.getElementById('popup-size-select');
  const addToCartBtn = document.querySelector('.add-to-cart-btn');

  if (!colorOption) return alert('Please select a color');
  if (!sizeSelect) return alert('Size selection not available');
  if (!addToCartBtn) return alert('Add to cart button not available');

  const selectedColor = colorOption.textContent;
  const selectedSize = sizeSelect.value;

  if (!selectedSize) return alert('Please select a size');

  const productData = window.currentProductData;
  if (!productData) return alert('Unable to add to cart. Please try again.');

  const isStillLoading = (!productData.variants || !productData.variants.length) && 
                        productData.colors?.length === 2 && 
                        productData.colors[0] === 'Black' && 
                        productData.colors[1] === 'White';
  
  if (isStillLoading) return alert('Please wait for product options to load...');

  let variantId = findVariantId(productData, selectedColor, selectedSize);
  if (!variantId) return alert('Unable to add to cart. Please try again.');

  const formData = new FormData();
  formData.append('id', variantId);
  formData.append('quantity', '1');

  const originalText = addToCartBtn.innerHTML;
  addToCartBtn.innerHTML = 'Adding...';
  addToCartBtn.disabled = true;

  fetch(Theme.routes.cart_add_url, {
    method: 'POST',
    body: formData,
    headers: { Accept: 'application/json' }
  })
  .then(response => {
    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
    return response.json();
  })
  .then(data => {
    if (data.status) {
      alert('Error adding to cart: ' + (data.message || 'Unknown error'));
    } else {
      document.dispatchEvent(new CustomEvent('cart:update', {
        detail: {
          resource: data,
          sourceId: 'quick-add-modal',
          data: {
            didError: false,
            source: 'quick-add-modal',
            itemCount: 1,
            productId: productData.productId || productData.id,
            variantId
          }
        },
        bubbles: true
      }));
      alert('Added to cart!');
      closePopup();
    }
  })
  .catch(error => {
    const statusErrors = {
      '422': 'This item cannot be added to cart. It may be out of stock or unavailable.',
      '400': 'Invalid request. Please try again.',
      '500': 'Server error. Please try again later.'
    };
    const statusCode = error.message.match(/status: (\d{3})/)?.[1];
    alert(statusErrors[statusCode] || 'Error adding to cart. Please try again.');
  })
  .finally(() => {
    addToCartBtn.innerHTML = originalText;
    addToCartBtn.disabled = false;
  });
}

function findVariantId(productData, selectedColor, selectedSize) {
  if (!productData.variants?.length) return productData.variantId;

  const commonColors = ['black', 'white', 'red', 'blue', 'green', 'yellow', 'pink', 'gray', 'grey', 'brown', 'purple', 'orange'];
  const commonSizes = ['xs', 's', 'm', 'l', 'xl', 'xxl', 'small', 'medium', 'large', 'extra small', 'extra large'];
  
  const sample = productData.variants[0];
  let colorKey = null, sizeKey = null;

  ['option1', 'option2', 'option3'].forEach(key => {
    if (sample[key]) {
      const val = sample[key].toLowerCase();
      if (commonColors.includes(val) && !colorKey) colorKey = key;
      else if (commonSizes.includes(val) && !sizeKey) sizeKey = key;
    }
  });

  if (!colorKey && !sizeKey) { colorKey = 'option1'; sizeKey = 'option2'; }
  else if (!colorKey) colorKey = sizeKey === 'option1' ? 'option2' : 'option1';
  else if (!sizeKey) sizeKey = colorKey === 'option1' ? 'option2' : 'option1';

  let variant = productData.variants.find(v => {
    const colorMatch = !selectedColor || (colorKey && v[colorKey]?.toLowerCase() === selectedColor.toLowerCase());
    const sizeMatch = !selectedSize || (sizeKey && v[sizeKey]?.toLowerCase() === selectedSize.toLowerCase());
    return colorMatch && sizeMatch && v.available !== false;
  });

  if (!variant) {
    variant = productData.variants.find(v => v.available !== false);
  }

  return variant?.id;
}

function testCart() {
  fetch(Theme.routes.cart_url + '.js')
    .then(response => response.json())
    .then(data => alert('Cart contains ' + data.item_count + ' items'))
    .catch(() => alert('Error accessing cart'));
}

window.testCart = testCart;

document.addEventListener('DOMContentLoaded', () => {
  const popup = document.getElementById('product-popup');
  if (popup) {
    popup.addEventListener('click', e => {
      if (e.target === popup) closePopup();
    });
  }

  const sizeSelect = document.getElementById('popup-size-select');
  const arrow = document.querySelector('.dropdown-arrow');
  
  if (sizeSelect && arrow) {
    sizeSelect.addEventListener('focus', () => arrow.classList.add('rotated'));
    sizeSelect.addEventListener('blur', () => arrow.classList.remove('rotated'));
    sizeSelect.addEventListener('mousedown', () => arrow.classList.add('rotated'));
    sizeSelect.addEventListener('change', () => setTimeout(() => arrow.classList.remove('rotated'), 100));
  }
});

document.addEventListener('click', e => {
  const button = e.target.closest('button, a');
  if (!button || (!button.textContent.includes('+') && !button.classList.contains('quick-add'))) return;

  const container = button.closest('.product-item, .product-card, .grid-product, .product, [data-product]');
  if (!container) return;

  const title = container.querySelector('.product-title, .product-name, h3, h2')?.textContent?.trim();
  const price = container.querySelector('.price, .product-price, .money')?.textContent?.trim();
  const image = container.querySelector('img')?.src;
  
  const productId = container.dataset.productId || 
                   container.querySelector('[data-product-id]')?.dataset.productId || 
                   container.id?.replace('product-card-', '');

  let variantId = null;
  let variants = [];

  const variantPicker = container.querySelector('variant-picker');
  if (variantPicker) {
    const selected = variantPicker.querySelector('input[type="radio"]:checked');
    if (selected) variantId = selected.dataset.variantId;

    variants = Array.from(variantPicker.querySelectorAll('input[data-variant-id]')).map(input => ({
      id: input.dataset.variantId,
      option1: input.dataset.option1 || input.value,
      option2: input.dataset.option2 || '',
      option3: input.dataset.option3 || '',
      available: input.dataset.optionAvailable !== 'false' && !input.disabled
    }));
  }

  const form = container.querySelector('form[data-type="add-to-cart-form"]');
  if (form && !variantId) {
    const input = form.querySelector('input[name="id"]');
    if (input) variantId = input.value;
  }

  const script = container.querySelector('script[type="application/json"]');
  if (script && !variantId) {
    try {
      const data = JSON.parse(script.textContent);
      if (data?.id) variantId = data.id;
    } catch (e) { console.warn('Could not parse variant JSON:', e); }
  }

  const productLink = container.querySelector('a[href*="/products/"]');
  const productUrl = productLink?.href;

  if (title || price) {
    const productData = {
      id: productId,
      title: title || 'Product Name',
      price: price || 'Price not available',
      image: image || '/placeholder.svg?height=600&width=400',
      description: 'This product is crafted with premium materials and attention to detail.',
      colors: ['Black', 'White'],
      sizes: ['XS', 'S', 'M', 'L', 'XL'],
      variantId,
      variants,
      productUrl
    };

    if ((!variants.length) && productUrl) fetchProductData(productUrl, productData);
    
    e.preventDefault();
    openPopup(productData);
  }
});

async function fetchProductData(productUrl, baseProductData) {
  try {
    const response = await fetch(productUrl.split('?')[0] + '.js');
    const productJson = await response.json();

    if (productJson?.variants && window.currentProductData?.id == baseProductData.id) {
      window.currentProductData.variants = productJson.variants;
      updatePopupWithVariants(productJson.variants);
    }
  } catch (error) {
    console.error('Could not fetch product data:', error);
  }
}

function updatePopupWithVariants(variants) {
  if (!variants?.length) return;

  const commonColors = ['black', 'white', 'red', 'blue', 'green', 'yellow', 'pink', 'gray', 'grey', 'brown', 'purple', 'orange'];
  const commonSizes = ['xs', 's', 'm', 'l', 'xl', 'xxl', 'small', 'medium', 'large', 'extra small', 'extra large'];
  
  const sample = variants[0];
  let colorKey = null, sizeKey = null;

  ['option1', 'option2', 'option3'].forEach(key => {
    if (sample[key]) {
      const val = sample[key].toLowerCase();
      if (commonColors.includes(val) && !colorKey) colorKey = key;
      else if (commonSizes.includes(val) && !sizeKey) sizeKey = key;
    }
  });

  if (!colorKey && !sizeKey) { colorKey = 'option1'; sizeKey = 'option2'; }
  else if (!colorKey) colorKey = sizeKey === 'option1' ? 'option2' : 'option1';
  else if (!sizeKey) sizeKey = colorKey === 'option1' ? 'option2' : 'option1';

  const colorValues = [...new Set(variants.map(v => v[colorKey]).filter(Boolean))];
  const sizeValues = [...new Set(variants.map(v => v[sizeKey]).filter(Boolean))];

  if (window.currentProductData) {
    window.currentProductData.colors = colorValues;
    window.currentProductData.sizes = sizeValues;
  }

  const addToCartBtn = document.querySelector('.add-to-cart-btn');
  if (addToCartBtn) {
    addToCartBtn.disabled = false;
    addToCartBtn.style.opacity = '1';
  }

  if (colorValues.length) {
    const colorContainer = document.getElementById('popup-color-options');
    if (colorContainer) {
      colorContainer.innerHTML = '';
      colorValues.forEach((color, i) => {
        const btn = document.createElement('button');
        btn.className = `color-option ${i === 0 ? 'active' : ''}`;
        btn.textContent = color;
        btn.onclick = () => {
          document.querySelectorAll('.color-option').forEach(opt => opt.classList.remove('active'));
          btn.classList.add('active');
          colorContainer.classList.toggle('second-selected', i === 1);
        };
        colorContainer.appendChild(btn);
      });
    }
  }

  if (sizeValues.length) {
    const sizeSelect = document.getElementById('popup-size-select');
    if (sizeSelect) {
      sizeSelect.innerHTML = '<option value="">Choose your size</option>';
      sizeValues.forEach(size => {
        const opt = document.createElement('option');
        opt.value = opt.textContent = size;
        sizeSelect.appendChild(opt);
      });
    }
  }
}
</script>
